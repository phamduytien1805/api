// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user.sql

package data_access

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id,
  username,
  email,
  email_verified,
  state
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, username, email, email_verified, created_at, state, stated_at
`

type CreateUserParams struct {
	ID            uuid.UUID `json:"id"`
	Username      string    `json:"username"`
	Email         string    `json:"email"`
	EmailVerified bool      `json:"email_verified"`
	State         int16     `json:"state"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.EmailVerified,
		arg.State,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.State,
		&i.StatedAt,
	)
	return i, err
}

const createUserCredential = `-- name: CreateUserCredential :one
INSERT INTO user_credentials (
  user_id,
  credential,
  salt
) VALUES (
  $1, $2, $3
) RETURNING user_id, credential, salt
`

type CreateUserCredentialParams struct {
	UserID     uuid.UUID `json:"user_id"`
	Credential string    `json:"credential"`
	Salt       string    `json:"salt"`
}

func (q *Queries) CreateUserCredential(ctx context.Context, arg CreateUserCredentialParams) (UserCredential, error) {
	row := q.db.QueryRow(ctx, createUserCredential, arg.UserID, arg.Credential, arg.Salt)
	var i UserCredential
	err := row.Scan(&i.UserID, &i.Credential, &i.Salt)
	return i, err
}

const createUserSocial = `-- name: CreateUserSocial :one
INSERT INTO user_social_tokens (
  user_id,
  provider_type,
  access_token,
  refresh_token,
  expires
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING user_id, provider_type, access_token, refresh_token, expires, created_at, updated_at
`

type CreateUserSocialParams struct {
	UserID       uuid.UUID          `json:"user_id"`
	ProviderType string             `json:"provider_type"`
	AccessToken  pgtype.Text        `json:"access_token"`
	RefreshToken pgtype.Text        `json:"refresh_token"`
	Expires      pgtype.Timestamptz `json:"expires"`
}

func (q *Queries) CreateUserSocial(ctx context.Context, arg CreateUserSocialParams) (UserSocialToken, error) {
	row := q.db.QueryRow(ctx, createUserSocial,
		arg.UserID,
		arg.ProviderType,
		arg.AccessToken,
		arg.RefreshToken,
		arg.Expires,
	)
	var i UserSocialToken
	err := row.Scan(
		&i.UserID,
		&i.ProviderType,
		&i.AccessToken,
		&i.RefreshToken,
		&i.Expires,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
